import logging
import json
import os
import asyncio
from config import API_TOKEN
from telebot.async_telebot import AsyncTeleBot
from display import format_board_as_emoji, create_game_keyboard
from game import TicTacToeGame
from telebot import types
from keyboards import (
    choice_keyboard,
    play_keyboard,
    game_mode_keyboard,
    field_size_keyboard,
    exit_queue_keyboard,
    exit_game_keyboard,
)
from player_queue import PlayerQueue


logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)

class TicTacToeBot:
    def __init__(self, api_token):
        self.bot = AsyncTeleBot(api_token)
        self.games = {}
        self.player_queue = PlayerQueue()

        self._register_handlers()
        self.leaderboard = self.load_leaderboard()

    def _register_handlers(self):
        @self.bot.message_handler(func=lambda message: message.text == "–í—ã—Ö–æ–¥")
        async def handle_exit(message):
            await self.handle_exit_game(message)

        @self.bot.message_handler(func=lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
        async def handle_exit_queue(message):
            await self.handle_exit_from_queue(message)

        @self.bot.message_handler(func=lambda message: message.text in ["–î–∞", "–ù–µ—Ç"])
        async def handle_yes_no(message):
            await self.handle_yes_no(message)

        @self.bot.message_handler(
            func=lambda message: message.text in ["–ü—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞", "–ü—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞"]
        )
        async def handle_game_mode_choice(message):
            await self.handle_game_mode_choice(message)

        @self.bot.message_handler(
            func=lambda message: message.text in ["–ö—Ä–µ—Å—Ç–∏–∫", "–ù–æ–ª–∏–∫"]
        )
        async def handle_symbol_choice(message):
            await self.handle_symbol_choice(message)

        @self.bot.message_handler(
            func=lambda message: message.text in ["–ü–æ–ª–µ 3x3", "–ü–æ–ª–µ 4x4"]
        )
        async def handle_field_size_choice(message):
            await self.handle_field_size_choice(message)

        @self.bot.callback_query_handler(func=lambda call: True)
        async def handle_callback(call):
            if call.data.startswith("move_"):
                await self.handle_move(call)
            elif call.data == "surrender":
                await self.handle_surrender(call)
            else:
                await self.bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

        @self.bot.message_handler(func=lambda message: True)
        async def handle_any_text(message):
            await self.handle_any_text(message)

        @self.bot.message_handler(commands=['/instruction'])
        async def handle_instruction(message):
            await self.send_instruction(message.chat.id)

        @self.bot.message_handler(commands=['/leaderboard'])
        async def handle_leaderboard(message):
            await self.send_leaderboard(message.chat.id)

    async def set_bot_commands(self):
        commands = [
            types.BotCommand("start", "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
            types.BotCommand("exit", "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã"),
            types.BotCommand("leaderboard", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥"),
            types.BotCommand("instruction", "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
        ]
        await self.bot.set_my_commands(commands)

    async def send_main_menu(self, chat_id):
        menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        menu_keyboard.add("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–õ–∏–¥–µ—Ä–±–æ—Ä–¥")
        await self.bot.send_message(
            chat_id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=menu_keyboard,
        )

    async def send_instruction(self, chat_id):
        instruction_text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏! üéÆ\n\n"
            "–í–æ—Ç –∫–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è (3x3 –∏–ª–∏ 4x4).\n"
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏ –¥–µ–ª–∞–π—Ç–µ —Ö–æ–¥—ã, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.\n\n"
            "–¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å —Ç—Ä–∏  —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏. –£–¥–∞—á–∏!"
        )
        await self.bot.send_message(chat_id, instruction_text)

    def load_leaderboard(self):

        if os.path.exists("leaderboard.json"):
            with open("leaderboard.json", "r", encoding="utf-8") as file:
                return json.load(file)
        return {}

    def save_leaderboard(self):

        with open("leaderboard.json", "w", encoding="utf-8") as file:
            json.dump(self.leaderboard, file, ensure_ascii=False, indent=4)

    async def update_leaderboard(self, user_id):
        try:

            user = await self.bot.get_chat(user_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ID {user_id}: {e}")
            return


        if user.username:
            identifier = user.username.lstrip('@')
        elif user.first_name:
            identifier = user.first_name
        else:
            identifier = f"User_{user_id}"


        if identifier not in self.leaderboard:
            self.leaderboard[identifier] = 0
        self.leaderboard[identifier] += 1


        self.save_leaderboard()


        logging.info(f"–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {identifier}")

    async def send_leaderboard(self, chat_id):
        if not self.leaderboard:
            await self.bot.send_message(chat_id, "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç. –°—ã–≥—Ä–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É!")
            return

        sorted_leaderboard = sorted(self.leaderboard.items(), key=lambda x: x[1], reverse=True)
        leaderboard_text = "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n"
        for idx, (identifier, wins) in enumerate(sorted_leaderboard, start=1):

            if "@" not in identifier:
                identifier = f"@{identifier}"

            leaderboard_text += f"{idx}. {identifier} - –ü–æ–±–µ–¥: {wins}\n"

        await self.bot.send_message(chat_id, leaderboard_text)

    def is_game_active(self, chat_id):
        return chat_id in self.games

    async def send_game_invite(self, chat_id):
        await self.bot.send_message(
            chat_id, "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É?", reply_markup=choice_keyboard
        )

    async def handle_exit_game(self, message):
        chat_id = message.chat.id
        if not self.is_game_active(chat_id):
            await self.send_game_invite(chat_id)
            return

        game_data = self.games.pop(chat_id, None)
        if game_data and game_data.get("opponent"):
            opponent_id = game_data["opponent"]
            await self.bot.send_message(opponent_id, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            self.games.pop(opponent_id, None)

        await self.bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

    async def handle_exit_from_queue(self, message):
        chat_id = message.chat.id

        field_size = self.games.get(chat_id, {}).get("field_size")
        if not field_size:
            await self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")
            return


        if self.player_queue.remove_player(chat_id, field_size):
            await self.bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏. –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
        else:
            await self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")

    async def handle_yes_no(self, message):
        if message.text == "–î–∞":
            await self.bot.send_message(
                message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=game_mode_keyboard
            )
        else:
            await self.bot.send_message(message.chat.id, "–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

    async def handle_game_mode_choice(self, message):
        chat_id = message.chat.id
        if self.is_game_active(chat_id):
            await self.bot.send_message(chat_id, "–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.")
            return

        game_mode = "bot" if message.text == "–ü—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞" else "player"
        self.games[chat_id] = {"mode": game_mode}
        await self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è:", reply_markup=field_size_keyboard)

    async def handle_field_size_choice(self, message):
        chat_id = message.chat.id
        if not self.is_game_active(chat_id):
            await self.send_game_invite(chat_id)
            return

        field_size = 3 if message.text == "–ü–æ–ª–µ 3x3" else 4
        self.games[chat_id]["field_size"] = field_size
        game_mode = self.games[chat_id]["mode"]

        if game_mode == "bot":
            await self.send_symbol_choice(chat_id)
        elif game_mode == "player":
            self.player_queue.add_player(chat_id, field_size)
            opponent_id = self.player_queue.get_opponent(chat_id, field_size)
            if opponent_id:
                await self.start_game(chat_id, opponent_id, field_size)
            else:
                await self.bot.send_message(
                    chat_id, "–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏. –û–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.", reply_markup=exit_queue_keyboard
                )

    async def send_symbol_choice(self, chat_id):
        await self.bot.send_message(
            chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ: –ö—Ä–µ—Å—Ç–∏–∫ –∏–ª–∏ –ù–æ–ª–∏–∫", reply_markup=play_keyboard
        )

    async def handle_symbol_choice(self, message):
        chat_id = message.chat.id
        if not self.is_game_active(chat_id):
            await self.send_game_invite(chat_id)
            return

        player_symbol = "X" if message.text == "–ö—Ä–µ—Å—Ç–∏–∫" else "O"
        game_mode = self.games[message.chat.id]["mode"]
        field_size = self.games[message.chat.id].get("field_size", 3)

        if game_mode == "bot":
            game = TicTacToeGame(
                player_symbol, mode=game_mode, field_size=field_size
            )
            self.games[message.chat.id]["game"] = game
            self.games[message.chat.id]["symbol"] = player_symbol
            self.games[message.chat.id]["message_id"] = None
            logging.debug(f"–ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {message.chat.id}")

            await self.bot.send_message(
                message.chat.id,
                f"–¢—ã –≤—ã–±—Ä–∞–ª {player_symbol}. –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!",
                reply_markup=exit_game_keyboard
            )

            if player_symbol == "O":
                game.bot_move()
            await self.display_board(message.chat.id)
        else:
            await self.bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...", reply_markup=exit_game_keyboard)

    async def start_game(self, player_1_id, player_2_id, field_size):
        game = TicTacToeGame("X", mode="player", field_size=field_size)
        self.games[player_1_id] = {
            "game": game,
            "opponent": player_2_id,
            "symbol": "X",
            "message_id": None,
        }
        self.games[player_2_id] = {
            "game": game,
            "opponent": player_1_id,
            "symbol": "O",
            "message_id": None,
        }

        await self.bot.send_message(
            player_1_id, "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ –ö—Ä–µ—Å—Ç–∏–∫–∏.", reply_markup=exit_game_keyboard
        )
        await self.bot.send_message(
            player_2_id, "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ –ù–æ–ª–∏–∫–∏.", reply_markup=exit_game_keyboard
        )

        await self.display_board(player_1_id)
        await self.display_board(player_2_id)

    async def display_board(self, chat_id):
        if chat_id not in self.games:
            await self.bot.send_message(
                chat_id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )
            logging.error(
                f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–æ—Å–∫—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã: chat_id={chat_id}"
            )
            return

        game_data = self.games[chat_id]
        game = game_data["game"]
        field_size = game.field_size
        board_display = format_board_as_emoji(game.get_board(), field_size)
        keyboard = create_game_keyboard(
            game.get_board(), field_size, game_over=False
        )

        logging.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–ª—è {chat_id}")

        if game_data.get("message_id") is None:
            sent_message = await self.bot.send_message(
                chat_id, board_display, reply_markup=keyboard
            )
            self.games[chat_id]["message_id"] = sent_message.message_id
        else:
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=game_data["message_id"],
                text=board_display,
                reply_markup=keyboard,
            )

    async def handle_move(self, call):
        chat_id = call.message.chat.id
        data = call.data
        if not data.startswith("move_"):
            return
        position = int(data.split("_")[1])

        if chat_id not in self.games:
            await self.bot.send_message(
                chat_id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )
            logging.error(
                f"–ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã: chat_id={chat_id}"
            )
            return

        game_data = self.games[chat_id]
        game = game_data["game"]
        player_symbol = game_data["symbol"]

        if game.current_player != player_symbol:
            await self.bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
            return

        if game.make_move(position):
            opponent_id = game_data.get("opponent")
            await self.display_board(chat_id)
            if opponent_id:
                await self.display_board(opponent_id)

            if game.winner:
                if game.winner == "Draw":
                    await self.bot.send_message(chat_id, "–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ –∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
                    if opponent_id:
                        await self.bot.send_message(opponent_id, "–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ –∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
                    game.reset_board()
                    await self.display_board(chat_id)
                    if opponent_id:
                        await self.display_board(opponent_id)


                    if game.mode == "bot" and game.bot_symbol == "X":
                        game.bot_move()
                        await self.display_board(chat_id)
                        if opponent_id:
                            await self.display_board(opponent_id)
                else:
                    result_message = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}"
                    await self.bot.send_message(chat_id, result_message)
                    if opponent_id:
                        await self.bot.send_message(opponent_id, result_message)

                    if game.winner != "Draw":
                        winner_id = chat_id if game.winner == player_symbol else opponent_id
                        await self.update_leaderboard(winner_id)
                        leaderboard_text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}!\n\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥:\n"
                        leaderboard_text += await self.format_leaderboard()
                        await self.bot.send_message(chat_id, leaderboard_text)
                        if opponent_id:
                            await self.bot.send_message(opponent_id, leaderboard_text)

                    del self.games[chat_id]
                    if opponent_id in self.games:
                        del self.games[opponent_id]
            else:
                if game.mode == "bot" and game.current_player == game.bot_symbol:
                    game.bot_move()
                    await self.display_board(chat_id)
                    if game.winner:
                        if game.winner == "Draw":
                            await self.bot.send_message(chat_id, "–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ –∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
                            game.reset_board()
                            await self.display_board(chat_id)
                        else:
                            result_message = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}"
                            await self.bot.send_message(chat_id, result_message)
                            del self.games[chat_id]
        else:
            await self.bot.answer_callback_query(
                call.id, "–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
            )

    async def handle_surrender(self, call):
        chat_id = call.message.chat.id

        if chat_id not in self.games:
            await self.bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            logging.error(
                f"–ü–æ–ø—ã—Ç–∫–∞ —Å–¥–∞—Ç—å—Å—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã: chat_id={chat_id}"
            )
            return

        game_data = self.games[chat_id]
        opponent_id = game_data.get("opponent")

        await self.bot.send_message(chat_id, "–í—ã —Å–¥–∞–ª–∏—Å—å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
        if opponent_id:
            await self.bot.send_message(opponent_id, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–∞–ª—Å—è. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
            del self.games[opponent_id]
        del self.games[chat_id]

    async def handle_callback(self, call):
        chat_id = call.message.chat.id
        if not self.is_game_active(chat_id):
            await self.bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            await self.send_game_invite(chat_id)
            return

        if call.data.startswith("move_"):
            await self.handle_move(call)
        elif call.data == "surrender":
            await self.handle_surrender(call)
        else:
            await self.bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    async def handle_any_text(self, message):
        chat_id = message.chat.id
        user_input = message.text

        if user_input == '/instruction':
            await self.send_instruction(chat_id)
            return

        if user_input == '/leaderboard':
            await self.send_leaderboard(chat_id)
            return

        if chat_id not in self.games:

            await self.send_game_invite(chat_id)
            return

        game_data = self.games[chat_id]
        game = game_data.get("game")
        current_state = {
            "mode": game_data.get("mode"),
            "field_size": game_data.get("field_size"),
            "symbol": game_data.get("symbol"),
            "is_player_turn": game.current_player == game_data["symbol"],
        }

        if user_input == "–í—ã—Ö–æ–¥" and current_state["mode"]:
            await self.handle_exit_game(message)
        elif user_input == "–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏" and not current_state["mode"]:
            await self.handle_exit_from_queue(message)
        elif user_input in ["–ö—Ä–µ—Å—Ç–∏–∫", "–ù–æ–ª–∏–∫"] and not current_state["symbol"]:
            await self.handle_symbol_choice(message)
        elif user_input in ["–ü–æ–ª–µ 3x3", "–ü–æ–ª–µ 4x4"] and not current_state["field_size"]:
            await self.handle_field_size_choice(message)
        else:

            await self.bot.send_message(
                chat_id,
                "–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∏–≥—Ä—ã.",
            )

    async def start_polling(self):
        await self.bot.infinity_polling()
        await self.set_bot_commands()

if __name__ == "__main__":
    bot = TicTacToeBot(API_TOKEN)
    asyncio.run(bot.start_polling())
